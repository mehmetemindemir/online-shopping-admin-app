import React, {Component} from 'react';import Page from "../../components/Page/Page";import {Box, TextField} from "@material-ui/core";import classes from './Product.module.css'import Card from "@material-ui/core/Card";import Button from "@material-ui/core/Button";import Modal from "../../components/UI/Modal/Modal";import * as actions from "../../store/actions/index"import axios from '../../axios-instance';import {connect} from "react-redux";import NewProductFrom from "../../components/UI/Product/NewProductFrom";import LinearProgress from "@material-ui/core/LinearProgress";import ProductTbl from "../../components/Table/ProductTbl";class Product extends Component {    state = {        addProductModal: false,        errorModal: false,        errorStr: '',        message: '',        page: 0,        limit: 10,        images: [],        subCategory: [],        productCritea: {            companyId: 1,            brandId: 0,            categoryId: 0,            subCategoryId: 0,            lang: "TR"        }    };    handleLimitChange = (limit) => {        this.setState({limit: limit});    }    addProductModalOpenHandler = () => {        this.setState({addProductModal: true});    }    addProductModalCloseHandler = () => {        this.setState({addProductModal: false});    }    addProduct = (data) => {        this.props.addProduct(data, this.state.productCritea);        if (this.props.productAddResult) {            console.log("productAddResult :", this.props.productAddResult)        }    }    componentDidMount() {        this.props.getMenu();        this.props.getBrand();        this.props.getProduct(this.state.productCritea)    }    addPhoto = (data) => {        this.props.addPhoto(data, this.state.productCritea);    }    componentDidUpdate(prevProps, prevState, snapshot) {        if (prevProps.photoList !== prevState.photoList && prevProps.photoList.length > 0) {            this.setState({images: [prevProps.photoList[0], ...this.state.images]});        }        /*console.log("prevState.productCritea , this.state.productCritea", prevState.productCritea !== prevProps.productCritea)        if (prevProps.productCritea !== this.state.productCritea) {            this.props.getProduct(this.state.productCritea)        }*/    }    addMainImage = (index) => {        console.log("index :", this.state.images);        const _images = this.state.images;        const indx = _images.findIndex((i => i.mainPhotoFlag === 1));        if (indx > -1) {            _images[indx].mainPhotoFlag = 0;        }        _images[index].mainPhotoFlag = 1;        this.setState({images: _images})        console.log("index :", this.state.images);    }    handlePageChange = (newPage) => {        this.setState({page: newPage});    }    changedPrdStatus = (data) => {        this.props.changedPrdStatus(data, this.state.productCritea);    }    handleChange = () => {    }    categoryChangedHandler = (e) => {        // console.log("e :", e.target.value);        const subCat = this.props.menuList.filter(menu => menu.id == e.target.value);        //console.log("subCat :", subCat[0].subCate);        if (subCat.length > 0) {            this.setState({subCategory: subCat[0].subCate});        }        let productCritea = this.state.productCritea;        productCritea.categoryId = e.target.value;        productCritea.subCategoryId = 0;        this.setState({productCritea: productCritea});        this.props.getProduct(this.state.productCritea);    }    subCategoryChangeHandle = (e) => {        let productCritea = this.state.productCritea;        productCritea.subCategoryId = e.target.value;        this.setState({productCritea: productCritea});        this.props.getProduct(this.state.productCritea);    }    brandChangeHandle = (e) => {        let productCritea = this.state.productCritea;        productCritea.brandId = e.target.value;        this.setState({productCritea: productCritea});        this.props.getProduct(this.state.productCritea);        console.log("productCritea.brandId :", this.state.productCritea.brandId);    }    render() {        let productContent = '';        let table = '';        let message = '';        let category = '';        let subCategory = '';        let brand = '';        table = this.props.errorProduct ? <p>Product Cant be loaded!</p> : <LinearProgress/>;        if (this.props.productLoading) {            if (this.props.productList) {                table =                    <Box>                        <LinearProgress/>                        <ProductTbl limitChange={this.handleLimitChange}                                    pageChange={this.handlePageChange}                                    limit={this.state.limit}                                    page={this.state.page}                                    productList={this.props.productList}                                    changedPrdStatus={this.changedPrdStatus}                        />                    </Box>;            }        } else {            console.log("this.props.productList :", this.props.productList)            if (this.props.productList) {                table = <Box>                    <ProductTbl limitChange={this.handleLimitChange}                                pageChange={this.handlePageChange}                                limit={this.state.limit}                                page={this.state.page}                                productList={this.props.productList}                                changedPrdStatus={this.changedPrdStatus}                    />                </Box>;            }        }        if (this.props.menuList || this.props.photoLoaded || this.props.photoTotal || this.state.images || this.props.brandList) {            productContent = <NewProductFrom                menuList={this.props.menuList}                photoLoaded={this.props.photoLoaded}                photoTotal={this.props.photoTotal}                photoList={this.state.images}                brandList={this.props.brandList}                addPhoto={this.addPhoto}                addProduct={this.addProduct}                addMainImage={this.addMainImage}            />        }        if (this.props.menuList) {            category = <TextField                fullWidth                label="Select Category"                name="categoryId"                required                onChange={e => {                    this.categoryChangedHandler(e);                }}                select                SelectProps={{native: true}}                variant="outlined"            >                <option key={0} value="0">ALL Category</option>                {this.props.menuList.map((option) => (                    <option key={option.id} value={option.id}>                        {option.categoryName}                    </option>                ))}            </TextField>;        }        if (this.state.subCategory) {            subCategory =                <TextField                    fullWidth                    label="Select Sub Category"                    name="subCategoryId"                    required                    onChange={this.subCategoryChangeHandle}                    select                    SelectProps={{native: true}}                    variant="outlined"                >                    <option key={0} value="0"> ALL Sub Category</option>                    {this.state.subCategory.map((option) => (                        <option key={option.id} value={option.id}>                            {option.categoryName}                        </option>                    ))}                </TextField>;        }        if (this.props.brandList) {            brand = <TextField                fullWidth                label="Select Brand"                name="brand"                required                select                onChange={this.brandChangeHandle}                SelectProps={{native: true}}                variant="outlined"            >                <option key={0} value="0">ALL</option>                {this.props.brandList.map((option) => (                    <option key={option.brandId} value={option.brandId}>                        {option.brandName}                    </option>                ))}            </TextField>;        }        return (            <Page title='Product'>                <Modal                    show={this.state.addProductModal}                    modalClosed={this.addProductModalCloseHandler}                    title="Add New Product"                >                    {productContent}                </Modal>                <Box margin={1}>                    <Card className={classes.card}>                        <Box m={1} className={classes.box}>                            {brand}                        </Box>                        <Box m={1} className={classes.box}>                            {category}                        </Box>                        <Box m={1} className={classes.box}>                            {subCategory}                        </Box>                        <Box m={1} className={classes.box}>                            <Box m={1} className={classes.box}>                                <Button                                    color='primary'                                    size="large"                                    type="submit"                                    variant="contained"                                    onClick={this.addProductModalOpenHandler}                                >                                    New Product                                </Button>                            </Box>                        </Box>                    </Card>                </Box>                <Box margin={1}>                    {table}                </Box>            </Page>        );    }}const mapStateToProps = state => {    return {        menuList: state.menu.menuData,        photoList: state.photo.photoData,        errorProduct: state.product.error,        menuLoading: state.menu.loading,        photoLoading: state.photo.loading,        photoTotal: state.photo.photoTotal,        photoLoaded: state.photo.photoLoaded,        brandList: state.brand.brandData,        productAddResult: state.product.productAddResult,        productList: state.product.productList,        productLoading: state.product.loading    }}const mapDispatchToProps = dispatch => {    return {        getMenu: () => dispatch(actions.getMenu()),        addPhoto: (data) => dispatch(actions.addPhoto(data)),        getBrand: () => dispatch(actions.getBrand()),        addProduct: (data, productCritea) => dispatch(actions.addProduct(data, productCritea)),        getProduct: (data) => dispatch(actions.getProduct(data)),        changedPrdStatus: (data, productCritea) => dispatch(actions.changedPrdStatus(data, productCritea))    }}export default connect(mapStateToProps, mapDispatchToProps)(Product, axios);
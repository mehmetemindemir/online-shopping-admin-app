import React, {Component} from 'react';import * as actions from "../../store/actions/index"import {connect} from "react-redux";import axios from '../../axios-instance';import MenuTbl from "../../components/Table/MenuTbl";import Box from "@material-ui/core/Box";import Container from "@material-ui/core/Container";import Card from "@material-ui/core/Card";import Page from "../../components/Page/Page";import {Button, TextField} from "@material-ui/core";import classes from './Menu.module.css'import Modal from '../../components/UI/Modal/Modal';import Spinner from "../../components/UI/Spinner/Spinner";import {Formik} from "formik";import * as Yup from "yup";class Menu extends Component {    state = {        addCategoryModal: false,        errorModal: false,        errorStr: '',        subCat: false    }    componentDidMount() {        this.props.getMenu();    }    errorModalHandler = () => {        this.setState({errorModal: true})    }    errorModalCancelHandler = () => {        this.setState({errorModal: false})    }    addCategoryHandler = () => {        this.setState({addCategoryModal: true, subCat: false});    }    addSubCategoryHandler = () => {        this.setState({addCategoryModal: true, subCat: true});    }    addCategoryCancelHandler = () => {        this.setState({addCategoryModal: false});    }    render() {        let table = "";        if (this.props.loading) {            table = <Spinner/>        }        table = this.props.error ? <p>Category can't be loaded!</p> : <Spinner/>;        if (this.props.menuList) {            table = <MenuTbl menu={this.props.menuList}/>        }        let mainCat = <Box            display="flex"            flexDirection="column"            height="100%"            justifyContent="center"        >            <Container maxWidth="sm">                <Formik                    initialValues={{                        categoryName: '',                        subid: 0,                    }}                    validationSchema={                        Yup.object().shape({                            categoryName: Yup.string().max(255).required('Category name is required'),                        })                    }                    onSubmit={(values, isSubmitting) => {                        try {                            const data = {                                categoryName: values.categoryName,                                subid: 0,                                companyId: 1,                                lang: "TR"                            };                            this.props.addMenu(data);                            isSubmitting.setSubmitting(false);                            this.addCategoryCancelHandler();                        } catch (e) {                            this.setState({errorStr: e.error})                            this.errorModalHandler();                        }                    }}                >                    {({                          errors,                          handleBlur,                          handleChange,                          handleSubmit,                          isSubmitting,                          touched,                          values                      }) => (                        <form onSubmit={handleSubmit}>                            <Box m={3}>                            </Box>                            <TextField                                error={Boolean(touched.categoryName && errors.categoryName)}                                fullWidth                                helperText={touched.categoryName && errors.categoryName}                                label="Category name"                                margin="normal"                                name="categoryName"                                onBlur={handleBlur}                                onChange={handleChange}                                value={values.categoryName}                                variant="outlined"                            />                            <Box my={2}>                                <Button                                    color="primary"                                    disabled={isSubmitting}                                    fullWidth                                    size="large"                                    type="submit"                                    variant="contained"                                >                                    New Category                                </Button>                            </Box>                        </form>                    )}                </Formik>            </Container>        </Box>        if (this.state.subCat) {            mainCat = <Box                display="flex"                flexDirection="column"                height="100%"                justifyContent="center"            >                <Container maxWidth="sm">                    <Formik                        initialValues={{                            categoryName: '',                            subid: 0,                        }}                        validationSchema={                            Yup.object().shape({                                categoryName: Yup.string().max(255).required('Category name is required'),                            })                        }                        onSubmit={(values, isSubmitting) => {                            try {                                const data = {                                    categoryName: values.categoryName,                                    subid: values.subId,                                    companyId: 1,                                    lang: "TR"                                };                                this.props.addMenu(data);                                isSubmitting.setSubmitting(false);                                this.addCategoryCancelHandler();                            } catch (e) {                                this.setState({errorStr: e.error})                                this.errorModalHandler();                            }                        }}                    >                        {({                              errors,                              handleBlur,                              handleChange,                              handleSubmit,                              isSubmitting,                              touched,                              values                          }) => (                            <form onSubmit={handleSubmit}>                                <Box m={3}>                                </Box>                                <TextField                                    error={Boolean(touched.categoryName && errors.categoryName)}                                    fullWidth                                    helperText={touched.categoryName && errors.categoryName}                                    label="Sub Category name"                                    margin="normal"                                    name="categoryName"                                    onBlur={handleBlur}                                    onChange={handleChange}                                    value={values.categoryName}                                    variant="outlined"                                />                                <Box my={2}>                                    <TextField                                        fullWidth                                        label="Select Category"                                        name="subId"                                        onChange={handleChange}                                        required                                        select                                        SelectProps={{native: true}}                                        value={values.subId}                                        variant="outlined"                                    >                                        {this.props.menuList.map((option) => (                                            <option                                                key={option.id}                                                value={option.id}                                            >                                                {option.categoryName}                                            </option>                                        ))}                                    </TextField>                                </Box>                                <Box my={2}>                                    <Button                                        color="primary"                                        disabled={isSubmitting}                                        fullWidth                                        size="large"                                        type="submit"                                        variant="contained"                                    >                                        New Category                                    </Button>                                </Box>                            </form>                        )}                    </Formik>                </Container>            </Box>        }        return (            <Page                title="Menu"            >                <Modal show={this.state.addCategoryModal} modalClosed={this.addCategoryCancelHandler}                       title="Add new category">                    {mainCat}                </Modal>                <Container maxWidth={false}>                    <Box mt={3} ml={3} mb={3}>                        <Card className={classes.card}>                            <Box m={1} className={classes.box}>                            </Box>                            <Box m={1} className={classes.box}>                                <Box m={1} className={classes.box}>                                    <Button                                        color="primary"                                        onClick={this.addCategoryHandler}                                        size="large"                                        type="submit"                                        variant="contained"                                    >                                        New Main Category                                    </Button>                                </Box>                                <Box m={1} className={classes.box}>                                    <Button                                        color="primary"                                        onClick={this.addSubCategoryHandler}                                        size="large"                                        type="submit"                                        variant="contained"                                    >                                        New Sub Category                                    </Button>                                </Box>                            </Box>                        </Card>                    </Box>                    <Box mt={3} ml={3} mb={3}>                        {table}                    </Box>                </Container>                <Modal show={this.state.errorModal} modalClosed={this.errorModalCancelHandler}                       title='!!!! Error'>                </Modal>            </Page>        );    }}const mapStateToProps = state => {    return {        loading: state.menu.loading,        error: state.menu.error,        menuList: state.menu.menuData    }}const mapDispatchToProps = dispatch => {    return {        getMenu: () => dispatch(actions.getMenu()),        addMenu: (data) => dispatch(actions.addMenu(data))    }}export default connect(mapStateToProps, mapDispatchToProps)(Menu, axios);
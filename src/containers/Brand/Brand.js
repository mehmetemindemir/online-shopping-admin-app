import React, {Component} from 'react';import Page from "../../components/Page/Page";import * as actions from "../../store/actions/index"import axios from '../../axios-instance';import {Box, Button} from "@material-ui/core";import {connect} from "react-redux";import Card from "@material-ui/core/Card";import classes from "../Menu/Menu.module.css";import Modal from "../../components/UI/Modal/Modal";import BrandTbl from "../../components/Table/BrandTbl";import LinearProgress from "@material-ui/core/LinearProgress";import NewBrandForm from "../../components/UI/Brand/NewBrandForm";import Alert from "@material-ui/lab/Alert";class Brand extends Component {    state = {        addBrandModal: false,        errorModal: false,        errorStr: '',        message: '',        page: 0,        limit: 10    }    addBrandHandler = () => {        this.setState({addBrandModal: true});    }    addBrandCancelHandler = (e) => {        this.setState({addBrandModal: false});    }    errorModalHandler = (e) => {        this.setState({errorStr: e.error})        this.setState({errorModal: true})    }    errorModalCancelHandler = () => {        this.setState({errorModal: false})    }    addNewBrand = (data) => {        this.props.addBrand(data);        this.setState({message: "add new brand"});        setTimeout(function () {            this.setState({message: ''})        }.bind(this), 10000);        this.addBrandCancelHandler();    }    handleLimitChange = (limit) => {        this.setState({limit: limit});    }    handlePageChange = (newPage) => {        this.setState({page: newPage});    }    componentDidMount() {        this.props.getBrand();    }    render() {        let table = "";        let message = "";        table = this.props.error ? <p>Brand can't be loaded!</p> : <LinearProgress/>;        if (this.props.loading) {            table = <LinearProgress/>;        }        if (this.props.brandList) {            if (this.props.loading) {                table =                    <Box>                        <LinearProgress/>                        <BrandTbl limitChange={this.handleLimitChange} pageChange={this.handlePageChange}                                  limit={this.state.limit} page={this.state.page} brand={this.props.brandList}                                  brandRemoved={this.props.onBrandRemoved}/>                    </Box>            } else {                table =                    <Box>                        <BrandTbl limitChange={this.handleLimitChange} pageChange={this.handlePageChange}                                  limit={this.state.limit} page={this.state.page} brand={this.props.brandList}                                  brandRemoved={this.props.onBrandRemoved}/>                    </Box>            }        }        if (this.state.message.length > 0) {            message =                <Card>                    <Alert severity="success">{this.state.message}</Alert>                </Card>;        }        let mainBrand = "";        console.log("this.props.priceListUrl: ", this.props.priceListUrl)        mainBrand = <NewBrandForm            addBrand={this.addNewBrand}            errorModalHandler={this.errorModalHandler}            logoLoaded={this.props.logoLoaded}            logoTotal={this.props.logoTotal}            logoUrl={this.props.logoUrl}            priceListLoaded={this.props.priceListLoaded}            priceListUrl={this.props.priceListUrl}            priceListTotal={this.props.priceListTotal}            addBrandLogo={this.props.addBrandLogo}            addBrandPriceList={this.props.addBrandPriceList}        />        return (            <Page title='Brand'>                <Modal show={this.state.addBrandModal}                       modalClosed={this.addBrandCancelHandler}                       title="Add new Brand">                    {mainBrand}                </Modal>                <Box margin={1}>                    <Card className={classes.card}>                        <Box m={1} className={classes.box}>                        </Box>                        <Box m={1} className={classes.box}>                            <Box m={1} className={classes.box}>                                <Button                                    color="primary"                                    onClick={this.addBrandHandler}                                    size="large"                                    type="submit"                                    variant="contained"                                >                                    New Brand                                </Button>                            </Box>                        </Box>                    </Card>                </Box>                <Box margin={1}>                    {message}                </Box>                <Box margin={1}>                    {table}                </Box>                <Modal show={this.state.errorModal} modalClosed={this.errorModalCancelHandler}                       title='!!!! Error'>                    {this.state.errorStr}                </Modal>            </Page>        );    }}const mapStateToProps = state => {    return {        loading: state.brand.loading,        error: state.brand.error,        brandList: state.brand.brandData,        logoError: state.brand.logoError,        priceListError: state.brand.priceListError,        logoUrl: state.brand.logoUrl,        priceListUrl: state.brand.priceListUrl,        logoLoaded: state.brand.logoLoaded,        logoTotal: state.brand.logoTotal,        priceListLoaded: state.brand.priceListLoaded,        priceListTotal: state.brand.priceListTotal    }}const mapDispatchToProps = dispatch => {    return {        getBrand: () => dispatch(actions.getBrand()),        addBrand: (data) => dispatch(actions.addBrand(data)),        onBrandRemoved: (id, status) => dispatch(actions.delBrand(id, status)),        addBrandLogo: (data) => dispatch(actions.addBrandLogo(data)),        addBrandPriceList: (data) => dispatch(actions.addBrandPrice(data))    }}export default connect(mapStateToProps, mapDispatchToProps)(Brand, axios);
import React, {Component} from 'react';import {connect} from "react-redux";import Avatar from '@material-ui/core/Avatar';import Button from '@material-ui/core/Button';import FormControlLabel from '@material-ui/core/FormControlLabel';import Checkbox from '@material-ui/core/Checkbox';import Link from '@material-ui/core/Link';import Grid from '@material-ui/core/Grid';import Box from '@material-ui/core/Box';import LockOutlinedIcon from '@material-ui/icons/LockOutlined';import Typography from '@material-ui/core/Typography';import Container from '@material-ui/core/Container';import classes from './Auth.module.css'import Input from '../../components/UI/Input/Input'import * as actions from '../../store/actions/index'import {checkValidity, updateObject} from "../../shared/utility";class Auth extends Component {    state = {        controls: {            email: {                elementType: 'TextField',                elementConfig: {                    type: 'email',                    label:"Email Address",                    variant:"outlined",                    margin:"normal",                    fullWidth:true                },                value: 'ONLINECHECKIN',                validation: {                    required: true,                    isEmail: true                },                valid: false,                touched: false            },            password: {                elementType: 'TextField',                elementConfig: {                    type: 'password',                    label:"Your Password",                    variant:"outlined",                    margin:"normal"                },                value: 'e10adc3x4932359sd7fsxdf7fs773e',                validation: {                    required: true,                    minLength: 6                },                valid: false,                touched: false            }        }    }    componentDidMount () {        if (this.props.authRedirectPath !== '/' ) {            this.props.onSetAuthRedirectPath();        }    }    inputChangedHandler = ( event, controlName ) => {        const updatedControls = updateObject( this.state.controls, {            [controlName]: updateObject( this.state.controls[controlName], {                value: event.target.value,                valid: checkValidity( event.target.value, this.state.controls[controlName].validation ),                touched: true            } )        } );        this.setState( { controls: updatedControls } );    }    submitHandler = ( event ) => {        event.preventDefault();        console.log("Email: ",this.state.controls.email.value);        this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value);    }    render() {        const formElementsArray = [];        for ( let key in this.state.controls ) {            formElementsArray.push( {                id: key,                config: this.state.controls[key]            } );        }        let form = formElementsArray.map( formElement => (            <Input                key={formElement.id}                elementType={formElement.config.elementType}                elementConfig={formElement.config.elementConfig}                value={formElement.config.value}                invalid={!formElement.config.valid}                shouldValidate={formElement.config.validation}                touched={formElement.config.touched}                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />        ) );        return (            <Container component="main" maxWidth="xs">                <div className={classes.paper}>                    <Avatar className={classes.avatar}>                        <LockOutlinedIcon/>                    </Avatar>                    <Typography component="h1" variant="h5">                        Sign in                    </Typography>                    <form className={classes.form} noValidate  onSubmit={this.submitHandler}>                        {form}                        <FormControlLabel                            control={<Checkbox value="remember" color="primary"/>}                            label="Remember me"                        />                        <Button                            type="submit"                            fullWidth                            variant="contained"                            color="primary"                            className={classes.submit}                        >                            Sign In                        </Button>                        <Grid container className={classes.grid} >                            <Grid item xs>                                <Link href="#" variant="body2">                                    Forgot password?                                </Link>                            </Grid>                            <Grid item>                                <Link href="#" variant="body2">                                    {"Don't have an account? Sign Up"}                                </Link>                            </Grid>                        </Grid>                    </form>                </div>                <Box mt={8}>                    <Typography variant="body2" color="textSecondary" align="center">                        {'Copyright Â© '}                        <Link color="inherit" href="https://material-ui.com/">                            Your Website                        </Link>{' '}                        {new Date().getFullYear()}                        {'.'}                    </Typography>                </Box>            </Container>        );    }}const mapStateToProps=state=>{    return{        loading: state.auth.loading,        error: state.auth.error,        isAuthenticated: state.auth.token !== null,    }}const mapDispatchToProps=dispatch=>{    return{        onAuth:(userName,password)=>dispatch(actions.auth(userName,password)),        onSetAuthRedirectPath: () => dispatch( actions.setAuthRedirectPath( '/' ) )    }}export default connect(mapStateToProps,mapDispatchToProps)(Auth);
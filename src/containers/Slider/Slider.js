import React, {Component} from 'react';import Page from "../../components/Page/Page";import {Box} from "@material-ui/core";import classes from './Slider.module.css'import Card from "@material-ui/core/Card";import Button from "@material-ui/core/Button";import Modal from "../../components/UI/Modal/Modal";import * as actions from "../../store/actions/index"import axios from '../../axios-instance';import {connect} from "react-redux";import LinearProgress from "@material-ui/core/LinearProgress";import SliderTbl from "../../components/Table/SliderTbl";import NewSliderFrom from "../../components/UI/Slider/NewSliderForm";class Slider extends Component {    state = {        AddSliderModal: false,        errorModal: false,        errorStr: '',        message: '',        page: 0,        limit: 10,        image: []    };    handleLimitChange = (limit) => {        this.setState({limit: limit});    }    AddSliderModalOpenHandler = () => {        this.setState({AddSliderModal: true});    }    AddSliderModalCloseHandler = () => {        this.setState({AddSliderModal: false});    }    addSlider = (data) => {        this.props.addSlider(data);    }    componentDidUpdate(prevProps, prevState, snapshot) {        if (prevProps.photoList !== prevState.photoList && prevProps.photoList.length > 0) {            this.setState({image: prevProps.photoList[0]});        }    }    componentDidMount() {        this.props.getSlider();    }    addPhoto = (data) => {        this.props.addPhoto(data);    }    handlePageChange = (newPage) => {        this.setState({page: newPage});    }    changedSliderStatus = (data) => {        this.props.changeSliderStatus(data);    }    addSlider = (data) => {        this.props.addSlider(data);        this.setState({image: []})    }    render() {        let newSliderForm = '';        let table = '';        table = this.props.error ? <p>Slider Cant be loaded!</p> : <LinearProgress/>;        if (this.props.loading) {            if (this.props.sliderList) {                table =                    <Box>                        <LinearProgress/>                        <SliderTbl limitChange={this.handleLimitChange}                                   pageChange={this.handlePageChange}                                   limit={this.state.limit}                                   page={this.state.page}                                   sliderList={this.props.sliderList}                                   changeSliderStatus={this.changedSliderStatus}                        />                    </Box>;            }        } else {            if (this.props.sliderList) {                table = <Box>                    <SliderTbl limitChange={this.handleLimitChange}                               pageChange={this.handlePageChange}                               limit={this.state.limit}                               page={this.state.page}                               sliderList={this.props.sliderList}                               changeSliderStatus={this.changedSliderStatus}                    />                </Box>;            } else {                table = <Box>                    Data Not found                </Box>;            }        }        console.log("this.props.photoList :", this.props.photoList);        if (this.props.photoLoaded || this.props.photoTotal || this.state.image) {            newSliderForm = <NewSliderFrom                photoLoaded={this.props.photoLoaded}                photoTotal={this.props.photoTotal}                photoList={this.state.image}                addPhoto={this.addPhoto}                addSlider={this.addSlider}            />        }        return (            <Page title='Slider'>                <Modal                    show={this.state.AddSliderModal}                    modalClosed={this.AddSliderModalCloseHandler}                    title="Add New Slider"                >                    {newSliderForm}                </Modal>                <Box margin={1}>                    <Card className={classes.card}>                        <Box m={1} className={classes.box}>                            <Box m={1} className={classes.box}>                                <Button                                    color='primary'                                    size="large"                                    type="submit"                                    variant="contained"                                    onClick={this.AddSliderModalOpenHandler}                                >                                    New Slider Item                                </Button>                            </Box>                        </Box>                    </Card>                </Box>                <Box margin={1}>                    {table}                </Box>            </Page>        );    }}const mapStateToProps = state => {    return {        sliderList: state.slider.sliderList,        error: state.slider.error,        loading: state.slider.loading,        errorPhoto: state.photo.error,        photoLoading: state.photo.loading,        photoList: state.photo.photoData,        photoTotal: state.photo.photoTotal,        photoLoaded: state.photo.photoLoaded,    }}const mapDispatchToProps = dispatch => {    return {        getSlider: () => dispatch(actions.listSlider()),        addSlider: (data) => dispatch(actions.addSlider(data)),        changeSliderStatus: (data) => dispatch(actions.changedSliderStatus(data)),        addPhoto: (data) => dispatch(actions.addPhoto(data))    }}export default connect(mapStateToProps, mapDispatchToProps)(Slider, axios);